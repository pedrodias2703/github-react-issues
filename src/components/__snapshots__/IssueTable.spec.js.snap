// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<IssueTable /> should render correctly 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <IssueTable
    issues={
      Array [
        Object {
          "assignee": null,
          "assignees": Array [],
          "author_association": "CONTRIBUTOR",
          "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
          "closed_at": null,
          "comments": 2,
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
          "created_at": "2018-12-20T13:40:35Z",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
          "html_url": "https://github.com/facebook/react/issues/14476",
          "id": 393051225,
          "labels": Array [
            Object {
              "color": "c2f27b",
              "default": false,
              "id": 1109410193,
              "name": "Component: Hooks",
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
            },
            Object {
              "color": "cc317c",
              "default": false,
              "id": 40929155,
              "name": "Type: Question",
              "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
            },
          ],
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
          "locked": false,
          "milestone": null,
          "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
          "number": 14476,
          "repository_url": "https://api.github.com/repos/facebook/react",
          "state": "open",
          "title": "useCallback/useEffect support custom comparator",
          "updated_at": "2018-12-20T16:40:00Z",
          "url": "https://api.github.com/repos/facebook/react/issues/14476",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "issues": Array [
        Object {
          "assignee": null,
          "assignees": Array [],
          "author_association": "CONTRIBUTOR",
          "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
          "closed_at": null,
          "comments": 2,
          "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
          "created_at": "2018-12-20T13:40:35Z",
          "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
          "html_url": "https://github.com/facebook/react/issues/14476",
          "id": 393051225,
          "labels": Array [
            Object {
              "color": "c2f27b",
              "default": false,
              "id": 1109410193,
              "name": "Component: Hooks",
              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
            },
            Object {
              "color": "cc317c",
              "default": false,
              "id": 40929155,
              "name": "Type: Question",
              "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
            },
          ],
          "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
          "locked": false,
          "milestone": null,
          "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
          "number": 14476,
          "repository_url": "https://api.github.com/repos/facebook/react",
          "state": "open",
          "title": "useCallback/useEffect support custom comparator",
          "updated_at": "2018-12-20T16:40:00Z",
          "url": "https://api.github.com/repos/facebook/react/issues/14476",
        },
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "as": "table",
        "celled": true,
        "children": Array [
          <TableHeader
            as="thead"
          >
            <TableRow
              as="tr"
              cellAs="td"
            >
              <TableHeaderCell
                as="th"
              >
                Issue #
              </TableHeaderCell>
              <TableHeaderCell
                as="th"
              >
                Title
              </TableHeaderCell>
              <TableHeaderCell
                as="th"
              >
                Created At
              </TableHeaderCell>
              <TableHeaderCell
                as="th"
              >
                Updated At
              </TableHeaderCell>
              <TableHeaderCell
                as="th"
              >
                Labels
              </TableHeaderCell>
              <TableHeaderCell
                as="th"
              >
                State
              </TableHeaderCell>
            </TableRow>
          </TableHeader>,
          <TableBody
            as="tbody"
          >
            <IssueRow
              issue={
                Object {
                  "assignee": null,
                  "assignees": Array [],
                  "author_association": "CONTRIBUTOR",
                  "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                  "closed_at": null,
                  "comments": 2,
                  "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                  "created_at": "2018-12-20T13:40:35Z",
                  "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                  "html_url": "https://github.com/facebook/react/issues/14476",
                  "id": 393051225,
                  "labels": Array [
                    Object {
                      "color": "c2f27b",
                      "default": false,
                      "id": 1109410193,
                      "name": "Component: Hooks",
                      "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                    },
                    Object {
                      "color": "cc317c",
                      "default": false,
                      "id": 40929155,
                      "name": "Type: Question",
                      "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                    },
                  ],
                  "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                  "locked": false,
                  "milestone": null,
                  "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                  "number": 14476,
                  "repository_url": "https://api.github.com/repos/facebook/react",
                  "state": "open",
                  "title": "useCallback/useEffect support custom comparator",
                  "updated_at": "2018-12-20T16:40:00Z",
                  "url": "https://api.github.com/repos/facebook/react/issues/14476",
                }
              }
            />
          </TableBody>,
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": <table
          class="ui celled table"
        >
          <thead
            class=""
          >
            <tr
              class=""
            >
              <th
                class=""
              >
                Issue #
              </th>
              <th
                class=""
              >
                Title
              </th>
              <th
                class=""
              >
                Created At
              </th>
              <th
                class=""
              >
                Updated At
              </th>
              <th
                class=""
              >
                Labels
              </th>
              <th
                class=""
              >
                State
              </th>
            </tr>
          </thead>
          <tbody
            class=""
          >
            <tr
              class=""
            >
              <td
                class=""
              >
                <a
                  href="https://github.com/facebook/react/issues/14476"
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  14476
                </a>
              </td>
              <td
                class=""
              >
                useCallback/useEffect support custom comparator
              </td>
              <td
                class=""
              >
                2018-12-20 11:40:35
              </td>
              <td
                class=""
              >
                2018-12-20 14:40:00
              </td>
              <td
                class=""
              >
                <li>
                  Component: Hooks
                  Type: Question
                </li>
              </td>
              <td
                class=""
              >
                OPEN
              </td>
            </tr>
          </tbody>
        </table>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <TableHeader
              as="thead"
            >
              <TableRow
                as="tr"
                cellAs="td"
              >
                <TableHeaderCell
                  as="th"
                >
                  Issue #
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Title
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Created At
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Updated At
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Labels
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  State
                </TableHeaderCell>
              </TableRow>
            </TableHeader>,
            <TableBody
              as="tbody"
            >
              <IssueRow
                issue={
                  Object {
                    "assignee": null,
                    "assignees": Array [],
                    "author_association": "CONTRIBUTOR",
                    "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                    "closed_at": null,
                    "comments": 2,
                    "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                    "created_at": "2018-12-20T13:40:35Z",
                    "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                    "html_url": "https://github.com/facebook/react/issues/14476",
                    "id": 393051225,
                    "labels": Array [
                      Object {
                        "color": "c2f27b",
                        "default": false,
                        "id": 1109410193,
                        "name": "Component: Hooks",
                        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                      },
                      Object {
                        "color": "cc317c",
                        "default": false,
                        "id": 40929155,
                        "name": "Type: Question",
                        "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                      },
                    ],
                    "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                    "locked": false,
                    "milestone": null,
                    "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                    "number": 14476,
                    "repository_url": "https://api.github.com/repos/facebook/react",
                    "state": "open",
                    "title": "useCallback/useEffect support custom comparator",
                    "updated_at": "2018-12-20T16:40:00Z",
                    "url": "https://api.github.com/repos/facebook/react/issues/14476",
                  }
                }
              />
            </TableBody>,
          ],
          "className": "ui celled table",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "as": "thead",
              "children": <TableRow
                as="tr"
                cellAs="td"
              >
                <TableHeaderCell
                  as="th"
                >
                  Issue #
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Title
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Created At
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Updated At
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Labels
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  State
                </TableHeaderCell>
              </TableRow>,
            },
            "ref": null,
            "rendered": Object {
              "instance": <thead
                class=""
              >
                <tr
                  class=""
                >
                  <th
                    class=""
                  >
                    Issue #
                  </th>
                  <th
                    class=""
                  >
                    Title
                  </th>
                  <th
                    class=""
                  >
                    Created At
                  </th>
                  <th
                    class=""
                  >
                    Updated At
                  </th>
                  <th
                    class=""
                  >
                    Labels
                  </th>
                  <th
                    class=""
                  >
                    State
                  </th>
                </tr>
              </thead>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <TableRow
                  as="tr"
                  cellAs="td"
                >
                  <TableHeaderCell
                    as="th"
                  >
                    Issue #
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Title
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Created At
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Updated At
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Labels
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    State
                  </TableHeaderCell>
                </TableRow>,
                "className": "",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "as": "tr",
                    "cellAs": "td",
                    "children": Array [
                      <TableHeaderCell
                        as="th"
                      >
                        Issue #
                      </TableHeaderCell>,
                      <TableHeaderCell
                        as="th"
                      >
                        Title
                      </TableHeaderCell>,
                      <TableHeaderCell
                        as="th"
                      >
                        Created At
                      </TableHeaderCell>,
                      <TableHeaderCell
                        as="th"
                      >
                        Updated At
                      </TableHeaderCell>,
                      <TableHeaderCell
                        as="th"
                      >
                        Labels
                      </TableHeaderCell>,
                      <TableHeaderCell
                        as="th"
                      >
                        State
                      </TableHeaderCell>,
                    ],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": <tr
                      class=""
                    >
                      <th
                        class=""
                      >
                        Issue #
                      </th>
                      <th
                        class=""
                      >
                        Title
                      </th>
                      <th
                        class=""
                      >
                        Created At
                      </th>
                      <th
                        class=""
                      >
                        Updated At
                      </th>
                      <th
                        class=""
                      >
                        Labels
                      </th>
                      <th
                        class=""
                      >
                        State
                      </th>
                    </tr>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <TableHeaderCell
                          as="th"
                        >
                          Issue #
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          Title
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          Created At
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          Updated At
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          Labels
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          State
                        </TableHeaderCell>,
                      ],
                      "className": "",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": "th",
                          "children": "Issue #",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Issue #",
                            "className": "",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <th
                              class=""
                            >
                              Issue #
                            </th>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "Issue #",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "Issue #",
                            ],
                            "type": "th",
                          },
                          "type": [Function],
                        },
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": "th",
                          "children": "Title",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Title",
                            "className": "",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <th
                              class=""
                            >
                              Title
                            </th>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "Title",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "Title",
                            ],
                            "type": "th",
                          },
                          "type": [Function],
                        },
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": "th",
                          "children": "Created At",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Created At",
                            "className": "",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <th
                              class=""
                            >
                              Created At
                            </th>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "Created At",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "Created At",
                            ],
                            "type": "th",
                          },
                          "type": [Function],
                        },
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": "th",
                          "children": "Updated At",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Updated At",
                            "className": "",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <th
                              class=""
                            >
                              Updated At
                            </th>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "Updated At",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "Updated At",
                            ],
                            "type": "th",
                          },
                          "type": [Function],
                        },
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": "th",
                          "children": "Labels",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Labels",
                            "className": "",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <th
                              class=""
                            >
                              Labels
                            </th>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "Labels",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "Labels",
                            ],
                            "type": "th",
                          },
                          "type": [Function],
                        },
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "as": "th",
                          "children": "State",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "State",
                            "className": "",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <th
                              class=""
                            >
                              State
                            </th>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "State",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "State",
                            ],
                            "type": "th",
                          },
                          "type": [Function],
                        },
                        "type": [Function],
                      },
                    ],
                    "type": "tr",
                  },
                  "type": [Function],
                },
              ],
              "type": "thead",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "as": "tbody",
              "children": Array [
                false,
                Array [
                  <IssueRow
                    issue={
                      Object {
                        "assignee": null,
                        "assignees": Array [],
                        "author_association": "CONTRIBUTOR",
                        "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                        "closed_at": null,
                        "comments": 2,
                        "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                        "created_at": "2018-12-20T13:40:35Z",
                        "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                        "html_url": "https://github.com/facebook/react/issues/14476",
                        "id": 393051225,
                        "labels": Array [
                          Object {
                            "color": "c2f27b",
                            "default": false,
                            "id": 1109410193,
                            "name": "Component: Hooks",
                            "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                          },
                          Object {
                            "color": "cc317c",
                            "default": false,
                            "id": 40929155,
                            "name": "Type: Question",
                            "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                          },
                        ],
                        "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                        "locked": false,
                        "milestone": null,
                        "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                        "number": 14476,
                        "repository_url": "https://api.github.com/repos/facebook/react",
                        "state": "open",
                        "title": "useCallback/useEffect support custom comparator",
                        "updated_at": "2018-12-20T16:40:00Z",
                        "url": "https://api.github.com/repos/facebook/react/issues/14476",
                      }
                    }
                  />,
                ],
              ],
            },
            "ref": null,
            "rendered": Object {
              "instance": <tbody
                class=""
              >
                <tr
                  class=""
                >
                  <td
                    class=""
                  >
                    <a
                      href="https://github.com/facebook/react/issues/14476"
                      rel="noopener noreferrer"
                      target="_blank"
                    >
                      14476
                    </a>
                  </td>
                  <td
                    class=""
                  >
                    useCallback/useEffect support custom comparator
                  </td>
                  <td
                    class=""
                  >
                    2018-12-20 11:40:35
                  </td>
                  <td
                    class=""
                  >
                    2018-12-20 14:40:00
                  </td>
                  <td
                    class=""
                  >
                    <li>
                      Component: Hooks
                      Type: Question
                    </li>
                  </td>
                  <td
                    class=""
                  >
                    OPEN
                  </td>
                </tr>
              </tbody>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  false,
                  Array [
                    <IssueRow
                      issue={
                        Object {
                          "assignee": null,
                          "assignees": Array [],
                          "author_association": "CONTRIBUTOR",
                          "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                          "closed_at": null,
                          "comments": 2,
                          "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                          "created_at": "2018-12-20T13:40:35Z",
                          "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                          "html_url": "https://github.com/facebook/react/issues/14476",
                          "id": 393051225,
                          "labels": Array [
                            Object {
                              "color": "c2f27b",
                              "default": false,
                              "id": 1109410193,
                              "name": "Component: Hooks",
                              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                            },
                            Object {
                              "color": "cc317c",
                              "default": false,
                              "id": 40929155,
                              "name": "Type: Question",
                              "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                            },
                          ],
                          "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                          "locked": false,
                          "milestone": null,
                          "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                          "number": 14476,
                          "repository_url": "https://api.github.com/repos/facebook/react",
                          "state": "open",
                          "title": "useCallback/useEffect support custom comparator",
                          "updated_at": "2018-12-20T16:40:00Z",
                          "url": "https://api.github.com/repos/facebook/react/issues/14476",
                        }
                      }
                    />,
                  ],
                ],
                "className": "",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "14476",
                  "nodeType": "function",
                  "props": Object {
                    "issue": Object {
                      "assignee": null,
                      "assignees": Array [],
                      "author_association": "CONTRIBUTOR",
                      "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                      "closed_at": null,
                      "comments": 2,
                      "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                      "created_at": "2018-12-20T13:40:35Z",
                      "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                      "html_url": "https://github.com/facebook/react/issues/14476",
                      "id": 393051225,
                      "labels": Array [
                        Object {
                          "color": "c2f27b",
                          "default": false,
                          "id": 1109410193,
                          "name": "Component: Hooks",
                          "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                        },
                        Object {
                          "color": "cc317c",
                          "default": false,
                          "id": 40929155,
                          "name": "Type: Question",
                          "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                        },
                      ],
                      "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                      "locked": false,
                      "milestone": null,
                      "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                      "number": 14476,
                      "repository_url": "https://api.github.com/repos/facebook/react",
                      "state": "open",
                      "title": "useCallback/useEffect support custom comparator",
                      "updated_at": "2018-12-20T16:40:00Z",
                      "url": "https://api.github.com/repos/facebook/react/issues/14476",
                    },
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": "14476",
                    "nodeType": "function",
                    "props": Object {
                      "as": "tr",
                      "cellAs": "td",
                      "children": Array [
                        <TableCell
                          as="td"
                        >
                          <a
                            href="https://github.com/facebook/react/issues/14476"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            14476
                          </a>
                        </TableCell>,
                        <TableCell
                          as="td"
                        >
                          useCallback/useEffect support custom comparator
                        </TableCell>,
                        <TableCell
                          as="td"
                        >
                          2018-12-20 11:40:35
                        </TableCell>,
                        <TableCell
                          as="td"
                        >
                          2018-12-20 14:40:00
                        </TableCell>,
                        <TableCell
                          as="td"
                        >
                          <li>
                            Component: Hooks
                            Type: Question
                          </li>
                        </TableCell>,
                        <TableCell
                          as="td"
                        >
                          OPEN
                        </TableCell>,
                      ],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": <tr
                        class=""
                      >
                        <td
                          class=""
                        >
                          <a
                            href="https://github.com/facebook/react/issues/14476"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            14476
                          </a>
                        </td>
                        <td
                          class=""
                        >
                          useCallback/useEffect support custom comparator
                        </td>
                        <td
                          class=""
                        >
                          2018-12-20 11:40:35
                        </td>
                        <td
                          class=""
                        >
                          2018-12-20 14:40:00
                        </td>
                        <td
                          class=""
                        >
                          <li>
                            Component: Hooks
                            Type: Question
                          </li>
                        </td>
                        <td
                          class=""
                        >
                          OPEN
                        </td>
                      </tr>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <TableCell
                            as="td"
                          >
                            <a
                              href="https://github.com/facebook/react/issues/14476"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              14476
                            </a>
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            useCallback/useEffect support custom comparator
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            2018-12-20 11:40:35
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            2018-12-20 14:40:00
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            <li>
                              Component: Hooks
                              Type: Question
                            </li>
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            OPEN
                          </TableCell>,
                        ],
                        "className": "",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "td",
                            "children": <a
                              href="https://github.com/facebook/react/issues/14476"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              14476
                            </a>,
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <td
                              class=""
                            >
                              <a
                                href="https://github.com/facebook/react/issues/14476"
                                rel="noopener noreferrer"
                                target="_blank"
                              >
                                14476
                              </a>
                            </td>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <a
                                href="https://github.com/facebook/react/issues/14476"
                                rel="noopener noreferrer"
                                target="_blank"
                              >
                                14476
                              </a>,
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <a
                                  href="https://github.com/facebook/react/issues/14476"
                                  rel="noopener noreferrer"
                                  target="_blank"
                                >
                                  14476
                                </a>,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": 14476,
                                  "href": "https://github.com/facebook/react/issues/14476",
                                  "rel": "noopener noreferrer",
                                  "target": "_blank",
                                },
                                "ref": null,
                                "rendered": Array [
                                  14476,
                                ],
                                "type": "a",
                              },
                            ],
                            "type": "td",
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "td",
                            "children": "useCallback/useEffect support custom comparator",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <td
                              class=""
                            >
                              useCallback/useEffect support custom comparator
                            </td>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "useCallback/useEffect support custom comparator",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "useCallback/useEffect support custom comparator",
                            ],
                            "type": "td",
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "td",
                            "children": "2018-12-20 11:40:35",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <td
                              class=""
                            >
                              2018-12-20 11:40:35
                            </td>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "2018-12-20 11:40:35",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "2018-12-20 11:40:35",
                            ],
                            "type": "td",
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "td",
                            "children": "2018-12-20 14:40:00",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <td
                              class=""
                            >
                              2018-12-20 14:40:00
                            </td>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "2018-12-20 14:40:00",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "2018-12-20 14:40:00",
                            ],
                            "type": "td",
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "td",
                            "children": <li>
                              Component: Hooks
                              Type: Question
                            </li>,
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <td
                              class=""
                            >
                              <li>
                                Component: Hooks
                                Type: Question
                              </li>
                            </td>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <li>
                                Component: Hooks
                                Type: Question
                              </li>,
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <li>
                                  Component: Hooks
                                  Type: Question
                                </li>,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": Array [
                                    "Component: Hooks",
                                    "Type: Question",
                                  ],
                                },
                                "ref": null,
                                "rendered": Array [
                                  "Component: Hooks",
                                  "Type: Question",
                                ],
                                "type": "li",
                              },
                            ],
                            "type": "td",
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "td",
                            "children": "OPEN",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": <td
                              class=""
                            >
                              OPEN
                            </td>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "OPEN",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Array [
                              "OPEN",
                            ],
                            "type": "td",
                          },
                          "type": [Function],
                        },
                      ],
                      "type": "tr",
                    },
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": "tbody",
            },
            "type": [Function],
          },
        ],
        "type": "table",
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "issues": Array [
          Object {
            "assignee": null,
            "assignees": Array [],
            "author_association": "CONTRIBUTOR",
            "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
            "closed_at": null,
            "comments": 2,
            "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
            "created_at": "2018-12-20T13:40:35Z",
            "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
            "html_url": "https://github.com/facebook/react/issues/14476",
            "id": 393051225,
            "labels": Array [
              Object {
                "color": "c2f27b",
                "default": false,
                "id": 1109410193,
                "name": "Component: Hooks",
                "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
              },
              Object {
                "color": "cc317c",
                "default": false,
                "id": 40929155,
                "name": "Type: Question",
                "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
              },
            ],
            "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
            "locked": false,
            "milestone": null,
            "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
            "number": 14476,
            "repository_url": "https://api.github.com/repos/facebook/react",
            "state": "open",
            "title": "useCallback/useEffect support custom comparator",
            "updated_at": "2018-12-20T16:40:00Z",
            "url": "https://api.github.com/repos/facebook/react/issues/14476",
          },
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "as": "table",
          "celled": true,
          "children": Array [
            <TableHeader
              as="thead"
            >
              <TableRow
                as="tr"
                cellAs="td"
              >
                <TableHeaderCell
                  as="th"
                >
                  Issue #
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Title
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Created At
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Updated At
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  Labels
                </TableHeaderCell>
                <TableHeaderCell
                  as="th"
                >
                  State
                </TableHeaderCell>
              </TableRow>
            </TableHeader>,
            <TableBody
              as="tbody"
            >
              <IssueRow
                issue={
                  Object {
                    "assignee": null,
                    "assignees": Array [],
                    "author_association": "CONTRIBUTOR",
                    "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                    "closed_at": null,
                    "comments": 2,
                    "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                    "created_at": "2018-12-20T13:40:35Z",
                    "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                    "html_url": "https://github.com/facebook/react/issues/14476",
                    "id": 393051225,
                    "labels": Array [
                      Object {
                        "color": "c2f27b",
                        "default": false,
                        "id": 1109410193,
                        "name": "Component: Hooks",
                        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                      },
                      Object {
                        "color": "cc317c",
                        "default": false,
                        "id": 40929155,
                        "name": "Type: Question",
                        "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                      },
                    ],
                    "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                    "locked": false,
                    "milestone": null,
                    "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                    "number": 14476,
                    "repository_url": "https://api.github.com/repos/facebook/react",
                    "state": "open",
                    "title": "useCallback/useEffect support custom comparator",
                    "updated_at": "2018-12-20T16:40:00Z",
                    "url": "https://api.github.com/repos/facebook/react/issues/14476",
                  }
                }
              />
            </TableBody>,
          ],
        },
        "ref": null,
        "rendered": Object {
          "instance": <table
            class="ui celled table"
          >
            <thead
              class=""
            >
              <tr
                class=""
              >
                <th
                  class=""
                >
                  Issue #
                </th>
                <th
                  class=""
                >
                  Title
                </th>
                <th
                  class=""
                >
                  Created At
                </th>
                <th
                  class=""
                >
                  Updated At
                </th>
                <th
                  class=""
                >
                  Labels
                </th>
                <th
                  class=""
                >
                  State
                </th>
              </tr>
            </thead>
            <tbody
              class=""
            >
              <tr
                class=""
              >
                <td
                  class=""
                >
                  <a
                    href="https://github.com/facebook/react/issues/14476"
                    rel="noopener noreferrer"
                    target="_blank"
                  >
                    14476
                  </a>
                </td>
                <td
                  class=""
                >
                  useCallback/useEffect support custom comparator
                </td>
                <td
                  class=""
                >
                  2018-12-20 11:40:35
                </td>
                <td
                  class=""
                >
                  2018-12-20 14:40:00
                </td>
                <td
                  class=""
                >
                  <li>
                    Component: Hooks
                    Type: Question
                  </li>
                </td>
                <td
                  class=""
                >
                  OPEN
                </td>
              </tr>
            </tbody>
          </table>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <TableHeader
                as="thead"
              >
                <TableRow
                  as="tr"
                  cellAs="td"
                >
                  <TableHeaderCell
                    as="th"
                  >
                    Issue #
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Title
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Created At
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Updated At
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Labels
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    State
                  </TableHeaderCell>
                </TableRow>
              </TableHeader>,
              <TableBody
                as="tbody"
              >
                <IssueRow
                  issue={
                    Object {
                      "assignee": null,
                      "assignees": Array [],
                      "author_association": "CONTRIBUTOR",
                      "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                      "closed_at": null,
                      "comments": 2,
                      "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                      "created_at": "2018-12-20T13:40:35Z",
                      "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                      "html_url": "https://github.com/facebook/react/issues/14476",
                      "id": 393051225,
                      "labels": Array [
                        Object {
                          "color": "c2f27b",
                          "default": false,
                          "id": 1109410193,
                          "name": "Component: Hooks",
                          "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                        },
                        Object {
                          "color": "cc317c",
                          "default": false,
                          "id": 40929155,
                          "name": "Type: Question",
                          "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                        },
                      ],
                      "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                      "locked": false,
                      "milestone": null,
                      "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                      "number": 14476,
                      "repository_url": "https://api.github.com/repos/facebook/react",
                      "state": "open",
                      "title": "useCallback/useEffect support custom comparator",
                      "updated_at": "2018-12-20T16:40:00Z",
                      "url": "https://api.github.com/repos/facebook/react/issues/14476",
                    }
                  }
                />
              </TableBody>,
            ],
            "className": "ui celled table",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "as": "thead",
                "children": <TableRow
                  as="tr"
                  cellAs="td"
                >
                  <TableHeaderCell
                    as="th"
                  >
                    Issue #
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Title
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Created At
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Updated At
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    Labels
                  </TableHeaderCell>
                  <TableHeaderCell
                    as="th"
                  >
                    State
                  </TableHeaderCell>
                </TableRow>,
              },
              "ref": null,
              "rendered": Object {
                "instance": <thead
                  class=""
                >
                  <tr
                    class=""
                  >
                    <th
                      class=""
                    >
                      Issue #
                    </th>
                    <th
                      class=""
                    >
                      Title
                    </th>
                    <th
                      class=""
                    >
                      Created At
                    </th>
                    <th
                      class=""
                    >
                      Updated At
                    </th>
                    <th
                      class=""
                    >
                      Labels
                    </th>
                    <th
                      class=""
                    >
                      State
                    </th>
                  </tr>
                </thead>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <TableRow
                    as="tr"
                    cellAs="td"
                  >
                    <TableHeaderCell
                      as="th"
                    >
                      Issue #
                    </TableHeaderCell>
                    <TableHeaderCell
                      as="th"
                    >
                      Title
                    </TableHeaderCell>
                    <TableHeaderCell
                      as="th"
                    >
                      Created At
                    </TableHeaderCell>
                    <TableHeaderCell
                      as="th"
                    >
                      Updated At
                    </TableHeaderCell>
                    <TableHeaderCell
                      as="th"
                    >
                      Labels
                    </TableHeaderCell>
                    <TableHeaderCell
                      as="th"
                    >
                      State
                    </TableHeaderCell>
                  </TableRow>,
                  "className": "",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "as": "tr",
                      "cellAs": "td",
                      "children": Array [
                        <TableHeaderCell
                          as="th"
                        >
                          Issue #
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          Title
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          Created At
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          Updated At
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          Labels
                        </TableHeaderCell>,
                        <TableHeaderCell
                          as="th"
                        >
                          State
                        </TableHeaderCell>,
                      ],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": <tr
                        class=""
                      >
                        <th
                          class=""
                        >
                          Issue #
                        </th>
                        <th
                          class=""
                        >
                          Title
                        </th>
                        <th
                          class=""
                        >
                          Created At
                        </th>
                        <th
                          class=""
                        >
                          Updated At
                        </th>
                        <th
                          class=""
                        >
                          Labels
                        </th>
                        <th
                          class=""
                        >
                          State
                        </th>
                      </tr>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <TableHeaderCell
                            as="th"
                          >
                            Issue #
                          </TableHeaderCell>,
                          <TableHeaderCell
                            as="th"
                          >
                            Title
                          </TableHeaderCell>,
                          <TableHeaderCell
                            as="th"
                          >
                            Created At
                          </TableHeaderCell>,
                          <TableHeaderCell
                            as="th"
                          >
                            Updated At
                          </TableHeaderCell>,
                          <TableHeaderCell
                            as="th"
                          >
                            Labels
                          </TableHeaderCell>,
                          <TableHeaderCell
                            as="th"
                          >
                            State
                          </TableHeaderCell>,
                        ],
                        "className": "",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Issue #",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "th",
                              "children": "Issue #",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <th
                                class=""
                              >
                                Issue #
                              </th>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Issue #",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "Issue #",
                              ],
                              "type": "th",
                            },
                            "type": [Function],
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Title",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "th",
                              "children": "Title",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <th
                                class=""
                              >
                                Title
                              </th>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Title",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "Title",
                              ],
                              "type": "th",
                            },
                            "type": [Function],
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Created At",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "th",
                              "children": "Created At",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <th
                                class=""
                              >
                                Created At
                              </th>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Created At",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "Created At",
                              ],
                              "type": "th",
                            },
                            "type": [Function],
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Updated At",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "th",
                              "children": "Updated At",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <th
                                class=""
                              >
                                Updated At
                              </th>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Updated At",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "Updated At",
                              ],
                              "type": "th",
                            },
                            "type": [Function],
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "Labels",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "th",
                              "children": "Labels",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <th
                                class=""
                              >
                                Labels
                              </th>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Labels",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "Labels",
                              ],
                              "type": "th",
                            },
                            "type": [Function],
                          },
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "as": "th",
                            "children": "State",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "th",
                              "children": "State",
                              "className": "",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <th
                                class=""
                              >
                                State
                              </th>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "State",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "State",
                              ],
                              "type": "th",
                            },
                            "type": [Function],
                          },
                          "type": [Function],
                        },
                      ],
                      "type": "tr",
                    },
                    "type": [Function],
                  },
                ],
                "type": "thead",
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "as": "tbody",
                "children": Array [
                  false,
                  Array [
                    <IssueRow
                      issue={
                        Object {
                          "assignee": null,
                          "assignees": Array [],
                          "author_association": "CONTRIBUTOR",
                          "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                          "closed_at": null,
                          "comments": 2,
                          "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                          "created_at": "2018-12-20T13:40:35Z",
                          "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                          "html_url": "https://github.com/facebook/react/issues/14476",
                          "id": 393051225,
                          "labels": Array [
                            Object {
                              "color": "c2f27b",
                              "default": false,
                              "id": 1109410193,
                              "name": "Component: Hooks",
                              "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                              "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                            },
                            Object {
                              "color": "cc317c",
                              "default": false,
                              "id": 40929155,
                              "name": "Type: Question",
                              "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                              "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                            },
                          ],
                          "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                          "locked": false,
                          "milestone": null,
                          "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                          "number": 14476,
                          "repository_url": "https://api.github.com/repos/facebook/react",
                          "state": "open",
                          "title": "useCallback/useEffect support custom comparator",
                          "updated_at": "2018-12-20T16:40:00Z",
                          "url": "https://api.github.com/repos/facebook/react/issues/14476",
                        }
                      }
                    />,
                  ],
                ],
              },
              "ref": null,
              "rendered": Object {
                "instance": <tbody
                  class=""
                >
                  <tr
                    class=""
                  >
                    <td
                      class=""
                    >
                      <a
                        href="https://github.com/facebook/react/issues/14476"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        14476
                      </a>
                    </td>
                    <td
                      class=""
                    >
                      useCallback/useEffect support custom comparator
                    </td>
                    <td
                      class=""
                    >
                      2018-12-20 11:40:35
                    </td>
                    <td
                      class=""
                    >
                      2018-12-20 14:40:00
                    </td>
                    <td
                      class=""
                    >
                      <li>
                        Component: Hooks
                        Type: Question
                      </li>
                    </td>
                    <td
                      class=""
                    >
                      OPEN
                    </td>
                  </tr>
                </tbody>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    false,
                    Array [
                      <IssueRow
                        issue={
                          Object {
                            "assignee": null,
                            "assignees": Array [],
                            "author_association": "CONTRIBUTOR",
                            "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                            "closed_at": null,
                            "comments": 2,
                            "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                            "created_at": "2018-12-20T13:40:35Z",
                            "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                            "html_url": "https://github.com/facebook/react/issues/14476",
                            "id": 393051225,
                            "labels": Array [
                              Object {
                                "color": "c2f27b",
                                "default": false,
                                "id": 1109410193,
                                "name": "Component: Hooks",
                                "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                                "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                              },
                              Object {
                                "color": "cc317c",
                                "default": false,
                                "id": 40929155,
                                "name": "Type: Question",
                                "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                                "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                              },
                            ],
                            "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                            "locked": false,
                            "milestone": null,
                            "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                            "number": 14476,
                            "repository_url": "https://api.github.com/repos/facebook/react",
                            "state": "open",
                            "title": "useCallback/useEffect support custom comparator",
                            "updated_at": "2018-12-20T16:40:00Z",
                            "url": "https://api.github.com/repos/facebook/react/issues/14476",
                          }
                        }
                      />,
                    ],
                  ],
                  "className": "",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "14476",
                    "nodeType": "function",
                    "props": Object {
                      "issue": Object {
                        "assignee": null,
                        "assignees": Array [],
                        "author_association": "CONTRIBUTOR",
                        "body": "Currently we can pass an array as second argument when using \`useCallback\` or \`useEffect\` like below:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
}, [a, b]) // how to do deep equal if a is an object ?
\`\`\`

The problem is it only compare array items with \`===\`,  it there any way to compare complex object ? 

Support custom comparator as third argument looks not bad:

\`\`\`js
useCallback(()=> {
  doSth(a, b)
  }, 
  [complexObject], 
  (item, previousItem)=> { //custom compare logic, return true || false here }
)
\`\`\`
",
                        "closed_at": null,
                        "comments": 2,
                        "comments_url": "https://api.github.com/repos/facebook/react/issues/14476/comments",
                        "created_at": "2018-12-20T13:40:35Z",
                        "events_url": "https://api.github.com/repos/facebook/react/issues/14476/events",
                        "html_url": "https://github.com/facebook/react/issues/14476",
                        "id": 393051225,
                        "labels": Array [
                          Object {
                            "color": "c2f27b",
                            "default": false,
                            "id": 1109410193,
                            "name": "Component: Hooks",
                            "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
                            "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
                          },
                          Object {
                            "color": "cc317c",
                            "default": false,
                            "id": 40929155,
                            "name": "Type: Question",
                            "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
                            "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
                          },
                        ],
                        "labels_url": "https://api.github.com/repos/facebook/react/issues/14476/labels{/name}",
                        "locked": false,
                        "milestone": null,
                        "node_id": "MDU6SXNzdWUzOTMwNTEyMjU=",
                        "number": 14476,
                        "repository_url": "https://api.github.com/repos/facebook/react",
                        "state": "open",
                        "title": "useCallback/useEffect support custom comparator",
                        "updated_at": "2018-12-20T16:40:00Z",
                        "url": "https://api.github.com/repos/facebook/react/issues/14476",
                      },
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": "14476",
                      "nodeType": "function",
                      "props": Object {
                        "as": "tr",
                        "cellAs": "td",
                        "children": Array [
                          <TableCell
                            as="td"
                          >
                            <a
                              href="https://github.com/facebook/react/issues/14476"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              14476
                            </a>
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            useCallback/useEffect support custom comparator
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            2018-12-20 11:40:35
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            2018-12-20 14:40:00
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            <li>
                              Component: Hooks
                              Type: Question
                            </li>
                          </TableCell>,
                          <TableCell
                            as="td"
                          >
                            OPEN
                          </TableCell>,
                        ],
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": <tr
                          class=""
                        >
                          <td
                            class=""
                          >
                            <a
                              href="https://github.com/facebook/react/issues/14476"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              14476
                            </a>
                          </td>
                          <td
                            class=""
                          >
                            useCallback/useEffect support custom comparator
                          </td>
                          <td
                            class=""
                          >
                            2018-12-20 11:40:35
                          </td>
                          <td
                            class=""
                          >
                            2018-12-20 14:40:00
                          </td>
                          <td
                            class=""
                          >
                            <li>
                              Component: Hooks
                              Type: Question
                            </li>
                          </td>
                          <td
                            class=""
                          >
                            OPEN
                          </td>
                        </tr>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <TableCell
                              as="td"
                            >
                              <a
                                href="https://github.com/facebook/react/issues/14476"
                                rel="noopener noreferrer"
                                target="_blank"
                              >
                                14476
                              </a>
                            </TableCell>,
                            <TableCell
                              as="td"
                            >
                              useCallback/useEffect support custom comparator
                            </TableCell>,
                            <TableCell
                              as="td"
                            >
                              2018-12-20 11:40:35
                            </TableCell>,
                            <TableCell
                              as="td"
                            >
                              2018-12-20 14:40:00
                            </TableCell>,
                            <TableCell
                              as="td"
                            >
                              <li>
                                Component: Hooks
                                Type: Question
                              </li>
                            </TableCell>,
                            <TableCell
                              as="td"
                            >
                              OPEN
                            </TableCell>,
                          ],
                          "className": "",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "td",
                              "children": <a
                                href="https://github.com/facebook/react/issues/14476"
                                rel="noopener noreferrer"
                                target="_blank"
                              >
                                14476
                              </a>,
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <td
                                class=""
                              >
                                <a
                                  href="https://github.com/facebook/react/issues/14476"
                                  rel="noopener noreferrer"
                                  target="_blank"
                                >
                                  14476
                                </a>
                              </td>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": <a
                                  href="https://github.com/facebook/react/issues/14476"
                                  rel="noopener noreferrer"
                                  target="_blank"
                                >
                                  14476
                                </a>,
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                Object {
                                  "instance": <a
                                    href="https://github.com/facebook/react/issues/14476"
                                    rel="noopener noreferrer"
                                    target="_blank"
                                  >
                                    14476
                                  </a>,
                                  "key": undefined,
                                  "nodeType": "host",
                                  "props": Object {
                                    "children": 14476,
                                    "href": "https://github.com/facebook/react/issues/14476",
                                    "rel": "noopener noreferrer",
                                    "target": "_blank",
                                  },
                                  "ref": null,
                                  "rendered": Array [
                                    14476,
                                  ],
                                  "type": "a",
                                },
                              ],
                              "type": "td",
                            },
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "td",
                              "children": "useCallback/useEffect support custom comparator",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <td
                                class=""
                              >
                                useCallback/useEffect support custom comparator
                              </td>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "useCallback/useEffect support custom comparator",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "useCallback/useEffect support custom comparator",
                              ],
                              "type": "td",
                            },
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "td",
                              "children": "2018-12-20 11:40:35",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <td
                                class=""
                              >
                                2018-12-20 11:40:35
                              </td>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "2018-12-20 11:40:35",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "2018-12-20 11:40:35",
                              ],
                              "type": "td",
                            },
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "td",
                              "children": "2018-12-20 14:40:00",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <td
                                class=""
                              >
                                2018-12-20 14:40:00
                              </td>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "2018-12-20 14:40:00",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "2018-12-20 14:40:00",
                              ],
                              "type": "td",
                            },
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "td",
                              "children": <li>
                                Component: Hooks
                                Type: Question
                              </li>,
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <td
                                class=""
                              >
                                <li>
                                  Component: Hooks
                                  Type: Question
                                </li>
                              </td>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": <li>
                                  Component: Hooks
                                  Type: Question
                                </li>,
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                Object {
                                  "instance": <li>
                                    Component: Hooks
                                    Type: Question
                                  </li>,
                                  "key": undefined,
                                  "nodeType": "host",
                                  "props": Object {
                                    "children": Array [
                                      "Component: Hooks",
                                      "Type: Question",
                                    ],
                                  },
                                  "ref": null,
                                  "rendered": Array [
                                    "Component: Hooks",
                                    "Type: Question",
                                  ],
                                  "type": "li",
                                },
                              ],
                              "type": "td",
                            },
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "as": "td",
                              "children": "OPEN",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": <td
                                class=""
                              >
                                OPEN
                              </td>,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "OPEN",
                                "className": "",
                              },
                              "ref": null,
                              "rendered": Array [
                                "OPEN",
                              ],
                              "type": "td",
                            },
                            "type": [Function],
                          },
                        ],
                        "type": "tr",
                      },
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                ],
                "type": "tbody",
              },
              "type": [Function],
            },
          ],
          "type": "table",
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
